{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MimsRC Den vollst\u00e4ndigen Code und die Unterlagen wie Datenbl\u00e4tter kann man unter MimsRC Github betrachten.","title":"Home"},{"location":"#mimsrc","text":"Den vollst\u00e4ndigen Code und die Unterlagen wie Datenbl\u00e4tter kann man unter MimsRC Github betrachten.","title":"MimsRC"},{"location":"about/","text":"Dokumentation f\u00fcr Diplomarbeit f\u00fcr die HTL-Bulme Graz G\u00f6sting von Martin Gspurning Ziel der Diplomarbeit ist es einen funktionsf\u00e4higen Bergeroboter zu entwerfen und mit diesem bei dem Robocup teilzunehmen. Umgesetzt wird das Projekt mit dem Arduino Mega 2560R3, welcher mit der Programmiersprache C Plus Plus programmiert wurde. Folgende Themen werden in dieser Arbeit behandelt: Pulweitenmodulation mit dem Timer/Counter Register Kommunikation zwischen dem Arduino Mega 2560R3 (Master) und den unterschiedlichen Sensoren (Slave) mittels I\u00b2C Messung von PWM und I\u00b2C mittels Oszilloskop und Analyse der Messungen Platinendesign Buchstabenerkennung mittels OpenMV Cam H7 und Maschinelearning etc.","title":"Inhalt"},{"location":"about/#dokumentation-fur-diplomarbeit-fur-die-htl-bulme-graz-gosting","text":"","title":"Dokumentation f\u00fcr Diplomarbeit f\u00fcr die HTL-Bulme Graz G\u00f6sting"},{"location":"about/#von-martin-gspurning","text":"Ziel der Diplomarbeit ist es einen funktionsf\u00e4higen Bergeroboter zu entwerfen und mit diesem bei dem Robocup teilzunehmen. Umgesetzt wird das Projekt mit dem Arduino Mega 2560R3, welcher mit der Programmiersprache C Plus Plus programmiert wurde. Folgende Themen werden in dieser Arbeit behandelt: Pulweitenmodulation mit dem Timer/Counter Register Kommunikation zwischen dem Arduino Mega 2560R3 (Master) und den unterschiedlichen Sensoren (Slave) mittels I\u00b2C Messung von PWM und I\u00b2C mittels Oszilloskop und Analyse der Messungen Platinendesign Buchstabenerkennung mittels OpenMV Cam H7 und Maschinelearning etc.","title":"von Martin Gspurning"},{"location":"languages/","text":"Programmiersprachen und Tools 1. Programmiersprachen Der Schwerpunkt des Unterrichts lag auf der Programmiersprache C . In dieser Arbeit m\u00f6chte ich jedoch den Fokus auf ihren Nachfolger C++ legen. Ich habe C++ gew\u00e4hlt, da es gegen\u00fcber C einige entscheidende Vorteile bietet, wie beispielsweise die Unterst\u00fctzung von Klassen und Vererbung . Diese Eigenschaften sind besonders hilfreich bei der Verarbeitung von Sensordaten. 2. Tools Mein Interesse beschr\u00e4nkt sich nicht nur auf die Programmierung von Mikrokontrollern. Daher habe ich mir das Ziel gesetzt, diese Diplomarbeit mit modernen Tools umzusetzen, die auch in der Arbeitswelt gefragt sind. Verwendet wurden unter anderem: Marimo : F\u00fcr die Bearbeitung der Messdaten und deren visuelle Darstellung. Git : Als Versionskontrollsystem zur Verwaltung des Projekts. GitHub Pages und MkDocs : Zur Erstellung dieser Website. KiCad : F\u00fcr die Gestaltung des Platinenlayouts. Mit dieser Arbeit m\u00f6chte ich zeigen, was ich w\u00e4hrend meiner Ausbildungszeit gelernt habe und welche F\u00e4higkeiten ich dadurch entwickeln konnte.","title":"Sprachen"},{"location":"languages/#programmiersprachen-und-tools","text":"","title":"Programmiersprachen und Tools"},{"location":"languages/#1-programmiersprachen","text":"Der Schwerpunkt des Unterrichts lag auf der Programmiersprache C . In dieser Arbeit m\u00f6chte ich jedoch den Fokus auf ihren Nachfolger C++ legen. Ich habe C++ gew\u00e4hlt, da es gegen\u00fcber C einige entscheidende Vorteile bietet, wie beispielsweise die Unterst\u00fctzung von Klassen und Vererbung . Diese Eigenschaften sind besonders hilfreich bei der Verarbeitung von Sensordaten.","title":"1. Programmiersprachen"},{"location":"languages/#2-tools","text":"Mein Interesse beschr\u00e4nkt sich nicht nur auf die Programmierung von Mikrokontrollern. Daher habe ich mir das Ziel gesetzt, diese Diplomarbeit mit modernen Tools umzusetzen, die auch in der Arbeitswelt gefragt sind. Verwendet wurden unter anderem: Marimo : F\u00fcr die Bearbeitung der Messdaten und deren visuelle Darstellung. Git : Als Versionskontrollsystem zur Verwaltung des Projekts. GitHub Pages und MkDocs : Zur Erstellung dieser Website. KiCad : F\u00fcr die Gestaltung des Platinenlayouts. Mit dieser Arbeit m\u00f6chte ich zeigen, was ich w\u00e4hrend meiner Ausbildungszeit gelernt habe und welche F\u00e4higkeiten ich dadurch entwickeln konnte.","title":"2. Tools"},{"location":"pwm/","text":"Timer/Counter0 f\u00fcr die Pulsweitenmodulation mit dem Atmega2560 1. \u00dcbersicht Der Timer/Counter0 ist ein 8-Bit-Z\u00e4hlermodul mit zwei unabh\u00e4ngigen Vergleichseinheiten und Unterst\u00fctzung f\u00fcr die Pulsweitenmodulation (PWM). Diese Funktion erm\u00f6glicht die pr\u00e4zise Steuerung eines generierten Signals. Das folgende Blockdiagramm illustriert den Ablauf: 2. Register \u00dcberblick Die wichtigsten Register sind: TCNT0 (Timer/Counter) OCR0A und OCR0B (Output Compare Register) Diese 8-Bit-Register k\u00f6nnen individuell programmiert werden. Interrupts werden \u00fcber das Timer Interrupt Mask Register (TIMSK0) konfiguriert. Der Timer/Counter kann mit dem internen Mikrokontroller-Takt oder einem externen Taktgeber am Pin T0 betrieben werden. Bei Nutzung des internen Takts kann der Prescaler im Register TCCR0B angepasst werden, um die Timer-Frequenz zu skalieren. Die Berechnung wird sp\u00e4ter erl\u00e4utert. Die OCR0A - und OCR0B -Register werden fortlaufend mit dem Z\u00e4hlerwert verglichen. Das Ergebnis dieses Vergleichs kann zur Signalerzeugung genutzt werden. 3. Detaillierte Registeranalyse f\u00fcr PWM 3.1. TCCR0A Im TCCR0A -Register wird das Bit WGM01 gesetzt, um den Timer in den Clear Timer on Compare Match (CTC) -Modus zu versetzen. In diesem Modus z\u00e4hlt der Timer bis zu einem definierten Wert und wird anschlie\u00dfend zur\u00fcckgesetzt. 3.2. TCCR0B Im TCCR0B -Register wird das Bit CS01 gesetzt, um den CPU-Takt mit einem Prescaler von 8 zu verwenden. 3.3. OCR0A 3.3.1. Funktion Das OCR0A -Register enth\u00e4lt einen 8-Bit-Wert, der mit dem Z\u00e4hler verglichen wird. Bei \u00dcbereinstimmung kann ein Interrupt ausgel\u00f6st werden, der zur PWM genutzt wird. Mit einem Prescaler von 8 wird alle 100 \u00b5s ein Interrupt generiert. 3.3.2. Berechnung des Vergleichswertes Das Ziel ist eine PWM mit 20 Hz f\u00fcr Servomotoren. Die Timer-Frequenz ergibt sich aus dem CPU-Takt und dem Prescaler: $$ f_{\\text{timertick}} = \\frac{16 \\cdot 10^6 \\, \\text{Hz}}{8} = 2 \\cdot 10^6 \\, \\text{Hz} $$ Ein Timerimpuls wird alle 0,1 ms ben\u00f6tigt: $$ \\text{ticks}(x) = f_{\\text{timertick}} \\cdot x = 2 \\cdot 10^6 \\cdot 0.1 \\cdot 10^{-3} = 200 $$ Der Vergleichswert ergibt sich zu: $$ OCR0A = \\text{ticks}(x) - 1 = 199 $$ 3.4. TIMSK0 Im TIMSK0 -Register wird das Bit OCIE0A gesetzt, um den Timer0-Interrupt bei einem Compare-Match zu aktivieren. 4. Grafische Darstellung der PWM Der modulierte Signalverlauf \u00fcber 3,5 ms zeigt unterschiedliche Pulsweiten, die zur Servomotorsteuerung genutzt werden. Positionen des Servomotors: 0\u00b0 : 500 \u00b5s 90\u00b0 : 1450 \u00b5s 180\u00b0 : 2400 \u00b5s Signal mit minimaler Pulsweite (1 ms): Signal mit maximaler Pulsweite (2 ms): 5. Frequenzanalyse des PWM-Signals 5.1. Sampling-Frequenz und Aufl\u00f6sung Die Sampling-Frequenz f_s = 3,13 MS/s erf\u00fcllt das Nyquist-Theorem: $$ f_s > 2 \\cdot f_{\\text{signal}} $$ 5.2. Spektrumverteilung Stark ged\u00e4mpft im h\u00f6heren Frequenzbereich (< -60 dB). 5.3. Charakteristische Frequenzkomponenten Dominante Grundfrequenz sichtbar bei niedriger Frequenz. 5.4. Rauschkomponenten Hohes Grundrauschen, besonders bei Frequenzen > 0.5 MHz. 6. Programmierung der Pulsweitenmodulation 7. Quellenangaben Datenblatt 8-bit Atmel Microcontroller Prescaler Konfiguration Nyquist-Frequenz FFT und LowPass Filter Curio Res","title":"Pulsweitenmodulation"},{"location":"pwm/#timercounter0-fur-die-pulsweitenmodulation-mit-dem-atmega2560","text":"","title":"Timer/Counter0 f\u00fcr die Pulsweitenmodulation mit dem Atmega2560"},{"location":"pwm/#1-ubersicht","text":"Der Timer/Counter0 ist ein 8-Bit-Z\u00e4hlermodul mit zwei unabh\u00e4ngigen Vergleichseinheiten und Unterst\u00fctzung f\u00fcr die Pulsweitenmodulation (PWM). Diese Funktion erm\u00f6glicht die pr\u00e4zise Steuerung eines generierten Signals. Das folgende Blockdiagramm illustriert den Ablauf:","title":"1. \u00dcbersicht"},{"location":"pwm/#2-register-uberblick","text":"Die wichtigsten Register sind: TCNT0 (Timer/Counter) OCR0A und OCR0B (Output Compare Register) Diese 8-Bit-Register k\u00f6nnen individuell programmiert werden. Interrupts werden \u00fcber das Timer Interrupt Mask Register (TIMSK0) konfiguriert. Der Timer/Counter kann mit dem internen Mikrokontroller-Takt oder einem externen Taktgeber am Pin T0 betrieben werden. Bei Nutzung des internen Takts kann der Prescaler im Register TCCR0B angepasst werden, um die Timer-Frequenz zu skalieren. Die Berechnung wird sp\u00e4ter erl\u00e4utert. Die OCR0A - und OCR0B -Register werden fortlaufend mit dem Z\u00e4hlerwert verglichen. Das Ergebnis dieses Vergleichs kann zur Signalerzeugung genutzt werden.","title":"2. Register \u00dcberblick"},{"location":"pwm/#3-detaillierte-registeranalyse-fur-pwm","text":"","title":"3. Detaillierte Registeranalyse f\u00fcr PWM"},{"location":"pwm/#31-tccr0a","text":"Im TCCR0A -Register wird das Bit WGM01 gesetzt, um den Timer in den Clear Timer on Compare Match (CTC) -Modus zu versetzen. In diesem Modus z\u00e4hlt der Timer bis zu einem definierten Wert und wird anschlie\u00dfend zur\u00fcckgesetzt.","title":"3.1. TCCR0A"},{"location":"pwm/#32-tccr0b","text":"Im TCCR0B -Register wird das Bit CS01 gesetzt, um den CPU-Takt mit einem Prescaler von 8 zu verwenden.","title":"3.2. TCCR0B"},{"location":"pwm/#33-ocr0a","text":"","title":"3.3. OCR0A"},{"location":"pwm/#331-funktion","text":"Das OCR0A -Register enth\u00e4lt einen 8-Bit-Wert, der mit dem Z\u00e4hler verglichen wird. Bei \u00dcbereinstimmung kann ein Interrupt ausgel\u00f6st werden, der zur PWM genutzt wird. Mit einem Prescaler von 8 wird alle 100 \u00b5s ein Interrupt generiert.","title":"3.3.1. Funktion"},{"location":"pwm/#332-berechnung-des-vergleichswertes","text":"Das Ziel ist eine PWM mit 20 Hz f\u00fcr Servomotoren. Die Timer-Frequenz ergibt sich aus dem CPU-Takt und dem Prescaler: $$ f_{\\text{timertick}} = \\frac{16 \\cdot 10^6 \\, \\text{Hz}}{8} = 2 \\cdot 10^6 \\, \\text{Hz} $$ Ein Timerimpuls wird alle 0,1 ms ben\u00f6tigt: $$ \\text{ticks}(x) = f_{\\text{timertick}} \\cdot x = 2 \\cdot 10^6 \\cdot 0.1 \\cdot 10^{-3} = 200 $$ Der Vergleichswert ergibt sich zu: $$ OCR0A = \\text{ticks}(x) - 1 = 199 $$","title":"3.3.2. Berechnung des Vergleichswertes"},{"location":"pwm/#34-timsk0","text":"Im TIMSK0 -Register wird das Bit OCIE0A gesetzt, um den Timer0-Interrupt bei einem Compare-Match zu aktivieren.","title":"3.4. TIMSK0"},{"location":"pwm/#4-grafische-darstellung-der-pwm","text":"Der modulierte Signalverlauf \u00fcber 3,5 ms zeigt unterschiedliche Pulsweiten, die zur Servomotorsteuerung genutzt werden.","title":"4. Grafische Darstellung der PWM"},{"location":"pwm/#positionen-des-servomotors","text":"0\u00b0 : 500 \u00b5s 90\u00b0 : 1450 \u00b5s 180\u00b0 : 2400 \u00b5s","title":"Positionen des Servomotors:"},{"location":"pwm/#signal-mit-minimaler-pulsweite-1-ms","text":"","title":"Signal mit minimaler Pulsweite (1 ms):"},{"location":"pwm/#signal-mit-maximaler-pulsweite-2-ms","text":"","title":"Signal mit maximaler Pulsweite (2 ms):"},{"location":"pwm/#5-frequenzanalyse-des-pwm-signals","text":"","title":"5. Frequenzanalyse des PWM-Signals"},{"location":"pwm/#51-sampling-frequenz-und-auflosung","text":"Die Sampling-Frequenz f_s = 3,13 MS/s erf\u00fcllt das Nyquist-Theorem: $$ f_s > 2 \\cdot f_{\\text{signal}} $$","title":"5.1. Sampling-Frequenz und Aufl\u00f6sung"},{"location":"pwm/#52-spektrumverteilung","text":"Stark ged\u00e4mpft im h\u00f6heren Frequenzbereich (< -60 dB).","title":"5.2. Spektrumverteilung"},{"location":"pwm/#53-charakteristische-frequenzkomponenten","text":"Dominante Grundfrequenz sichtbar bei niedriger Frequenz.","title":"5.3. Charakteristische Frequenzkomponenten"},{"location":"pwm/#54-rauschkomponenten","text":"Hohes Grundrauschen, besonders bei Frequenzen > 0.5 MHz.","title":"5.4. Rauschkomponenten"},{"location":"pwm/#6-programmierung-der-pulsweitenmodulation","text":"","title":"6. Programmierung der Pulsweitenmodulation"},{"location":"pwm/#7-quellenangaben","text":"Datenblatt 8-bit Atmel Microcontroller Prescaler Konfiguration Nyquist-Frequenz FFT und LowPass Filter Curio Res","title":"7. Quellenangaben"}]}